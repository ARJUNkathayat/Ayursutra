generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id             Int        @id @default(autoincrement())
  firstName      String
  lastName       String
  age            Int
  gender         String
  medicalHistory String?
  createdAt      DateTime   @default(now())
  phoneNumber    String     @unique
  password       String?
  feedbacks      Feedback[]
  sessions       Session[]
}

model Therapy {
  id              Int          @id @default(autoincrement())
  name            String       @unique
  description     String
  durationMinutes Int
  image           String?
  category        String?
  benefits        String
  precautions     Precaution[]
  sessions        Session[]
  doctors         Doctor[]     @relation("DoctorTherapies")
}

model Precaution {
  id        Int            @id @default(autoincrement())
  therapyId Int
  type      PrecautionType
  content   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  therapy   Therapy        @relation(fields: [therapyId], references: [id])
}

model Doctor {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  phone             String
  specialization    String
  experienceYears   Int
  availableSlots    String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  password          String?
  city  String? @default("Delhi")
   state  String? @default("Delhi")
    district  String? @default("Delhi")
     address  String? @default("Delhi")
  sessions          Session[]
  assignedTherapies Therapy[] @relation("DoctorTherapies")
}

model Session {
  id            Int            @id @default(autoincrement())
  patientId     Int
  doctorId      Int
  therapyId     Int
  scheduledAt   DateTime
  status        SessionStatus  @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  feedback      Feedback?
  notifications Notification[]
  doctor        Doctor         @relation(fields: [doctorId], references: [id])
  patient       Patient        @relation(fields: [patientId], references: [id])
  therapy       Therapy        @relation(fields: [therapyId], references: [id])
}

model Notification {
  id        Int              @id @default(autoincrement())
  sessionId Int
  message   String
  type      NotificationType
  sentAt    DateTime         @default(now())
  session   Session          @relation(fields: [sessionId], references: [id])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  sessionId Int      @unique
  patientId Int
  rating    Int
  comments  String?
  createdAt DateTime @default(now())
  patient   Patient  @relation(fields: [patientId], references: [id])
  session   Session  @relation(fields: [sessionId], references: [id])
}

enum PrecautionType {
  PRE_KARMA
  POST_KARMA
}

enum SessionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum NotificationType {
  PRE_PROCEDURE
  POST_PROCEDURE
  GENERAL
}
